// Licensed to the .NET Foundation under one or more agreements.
// The .NET Foundation licenses this file to you under the MIT license.

// x86 instructions for  the JIT compiler
//
// INST0-5 macro params:
//   id    - the enum name for the instruction
//   nm    - textual name (for assembly dipslay)
//   um    - update mode, see IUM_xx enum (rd, wr, or rw)
//   mr    - base encoding for R/M[reg] addressing mode
//   mi    - base encoding for R/M,icon addressing mode
//   rm    - base encoding for reg,R/M  addressing mode
//   a4    - base encoding for eax,i32  addressing mode
//   rr    - base encoding for register addressing mode
//   flags - flags, see INS_FLAGS_* enum
//
// The hex codes in this file represent the instruction encoding as follows:
//
//   0x0000ff00 - modrm byte position
//   0x000000ff - last byte of opcode (before modrm)
//   0x00ff0000 - first byte of opcode
//   0xff000000 - middle byte of opcode, if needed (after first, before last)
//
// Multi-byte opcodes without modrm are represented in mixed endian fashion.
//
// So a 1-byte opcode is:      and with modrm:
//             0x00000011          0x0000RM11
//
// So a 2-byte opcode is:      and with modrm:
//             0x00002211          0x0011RM22
//
// So a 3-byte opcode is:      and with modrm:
//             0x00113322          0x2211RM33
//
// So a 4-byte opcode would be something like this:
//             0x22114433

#define PACK3(byte1, byte2, byte3) (((byte1) << 16) | ((byte2) << 24) | (byte3))
#define PACK2(byte1, byte2) (((byte1) << 16) | (byte2))
#define PACK4(byte1, byte2, byte3, byte4) (((byte1) << 16) | ((byte2) << 24) | (byte3) | ((byte4) << 8))

#define PCKFLT(c) PACK2(0x0F, c)
#define SSEFLT(c) PACK3(0xF3, 0x0F, c)
#define SSEDBL(c) PACK3(0xF2, 0x0F, c)
#define PCKDBL(c) PACK3(0x66, 0x0F, c)
#define SSE38(c) PACK4(0x66, 0x0F, 0x38, c)
#define F20F38(c) PACK4(0xF2, 0x0F, 0x38, c)
#define SSE3A(c) PACK4(0x66, 0x0F, 0x3A, c)

// VEX* encodes the implied leading opcode bytes in c1:
// 1: implied 0f, 2: implied 0f 38, 3: implied 0f 3a
#define VEX2INT(c1, c2) PACK3(c1, 0xc5, c2)
#define VEX3INT(c1, c2) PACK4(c1, 0xc5, 0x02, c2)
#define VEX3FLT(c1, c2) PACK4(c1, 0xc5, 0x02, c2)

#ifndef INSTA
#define INSTA(...)
#endif

#ifdef TARGET_XARCH

// clang-format off
//    id                nm                  um      mr            mi            rm            a4            rr           flags
INST5(invalid,          "INVALID",          IUM_RD, BAD_CODE,     BAD_CODE,     BAD_CODE,     BAD_CODE,     BAD_CODE,    None)

INST5(push,             "push",             IUM_RD, 0x30FF,       0x68,         BAD_CODE,     BAD_CODE,     0x50,        None)
INST5(pop,              "pop",              IUM_WR, 0x008F,       BAD_CODE,     BAD_CODE,     BAD_CODE,     0x58,        None)
// Does not affect the stack tracking in the emitter
INST5(push_hide,        "push",             IUM_RD, 0x30FF,       0x68,         BAD_CODE,     BAD_CODE,     0x50,        None)
INST5(pop_hide,         "pop",              IUM_WR, 0x008F,       BAD_CODE,     BAD_CODE,     BAD_CODE,     0x58,        None)
#ifdef TARGET_X86
INST5(inc_s,            "inc",              IUM_RW, BAD_CODE,     BAD_CODE,     BAD_CODE,     BAD_CODE,     0x40,        IncDecFlags)
INST5(dec_s,            "dec",              IUM_RW, BAD_CODE,     BAD_CODE,     BAD_CODE,     BAD_CODE,     0x48,        IncDecFlags)
#endif
INST5(bswap,            "bswap",            IUM_RW, PCKFLT(0xC8), BAD_CODE,     BAD_CODE,     BAD_CODE,     0xC80F,      None)

//    id                nm                  um      mr            mi            rm            a4                         flags
INST4(add,              "add",              IUM_RW, 0x01,         0x0081,       0x03,         0x05,                      AddSubFlags)
INST4(or,               "or",               IUM_RW, 0x09,         0x0881,       0x0B,         0x0D,                      BitwiseFlags)
INST4(adc,              "adc",              IUM_RW, 0x11,         0x1081,       0x13,         0x15,                      AddSubCarryFlags)
INST4(sbb,              "sbb",              IUM_RW, 0x19,         0x1881,       0x1B,         0x1D,                      AddSubCarryFlags)
INST4(and,              "and",              IUM_RW, 0x21,         0x2081,       0x23,         0x25,                      BitwiseFlags)
INST4(sub,              "sub",              IUM_RW, 0x29,         0x2881,       0x2B,         0x2D,                      AddSubFlags)
INST4(xor,              "xor",              IUM_RW, 0x31,         0x3081,       0x33,         0x35,                      BitwiseFlags)
INST4(cmp,              "cmp",              IUM_RD, 0x39,         0x3881,       0x3B,         0x3D,                      AddSubFlags)
INST4(test,             "test",             IUM_RD, 0x85,         0x00F7,       0x85,         0xA9,                      BitwiseFlags)

//    id                nm                  um      mr            mi            rm                                       flags
INST3(xchg,             "xchg",             IUM_RW, 0x87,         BAD_CODE,     0x87,                                    None)
INST3(mov,              "mov",              IUM_WR, 0x89,         0x00C7,       0x8B,                                    None)
INST3(movzx,            "movzx",            IUM_WR, BAD_CODE,     BAD_CODE,     PCKFLT(0xB7),                            None)
INST3(movsx,            "movsx",            IUM_WR, BAD_CODE,     BAD_CODE,     PCKFLT(0xBF),                            None)
#ifdef TARGET_AMD64
INST3(movsxd,           "movsxd",           IUM_WR, BAD_CODE,     BAD_CODE,     0x63,                                    None)
#endif
INST3(lea,              "lea",              IUM_WR, BAD_CODE,     BAD_CODE,     0x8D,                                    None)

INST3(imul,             "imul",             IUM_RW, BAD_CODE,     BAD_CODE,     PCKFLT(0xAF),                            ImulFlags)
INST3(imuli,            "imul",             IUM_RD, BAD_CODE,     BAD_CODE,     0x69,                                    ImulFlags)

INST3(bt,               "bt",               IUM_RD, PCKFLT(0xA3), BAD_CODE,     PCKFLT(0xA3),                            BitTestFlags)
INST3(bsf,              "bsf",              IUM_WR, BAD_CODE,     BAD_CODE,     PCKFLT(0xBC),                            BitScanFlags)
INST3(bsr,              "bsr",              IUM_WR, BAD_CODE,     BAD_CODE,     PCKFLT(0xBD),                            BitScanFlags)

INST3(cmovo,            "cmovo",            IUM_WR, BAD_CODE,     BAD_CODE,     PCKFLT(0x40),                            CcFlags_o)
INST3(cmovno,           "cmovno",           IUM_WR, BAD_CODE,     BAD_CODE,     PCKFLT(0x41),                            CcFlags_no)
INST3(cmovb,            "cmovb",            IUM_WR, BAD_CODE,     BAD_CODE,     PCKFLT(0x42),                            CcFlags_b)
INST3(cmovae,           "cmovae",           IUM_WR, BAD_CODE,     BAD_CODE,     PCKFLT(0x43),                            CcFlags_ae)
INST3(cmove,            "cmove",            IUM_WR, BAD_CODE,     BAD_CODE,     PCKFLT(0x44),                            CcFlags_e)
INST3(cmovne,           "cmovne",           IUM_WR, BAD_CODE,     BAD_CODE,     PCKFLT(0x45),                            CcFlags_ne)
INST3(cmovbe,           "cmovbe",           IUM_WR, BAD_CODE,     BAD_CODE,     PCKFLT(0x46),                            CcFlags_be)
INST3(cmova,            "cmova",            IUM_WR, BAD_CODE,     BAD_CODE,     PCKFLT(0x47),                            CcFlags_a)
INST3(cmovs,            "cmovs",            IUM_WR, BAD_CODE,     BAD_CODE,     PCKFLT(0x48),                            CcFlags_s)
INST3(cmovns,           "cmovns",           IUM_WR, BAD_CODE,     BAD_CODE,     PCKFLT(0x49),                            CcFlags_ns)
INST3(cmovp,            "cmovp",            IUM_WR, BAD_CODE,     BAD_CODE,     PCKFLT(0x4A),                            CcFlags_p)
INST3(cmovnp,           "cmovnp",           IUM_WR, BAD_CODE,     BAD_CODE,     PCKFLT(0x4B),                            CcFlags_np)
INST3(cmovl,            "cmovl",            IUM_WR, BAD_CODE,     BAD_CODE,     PCKFLT(0x4C),                            CcFlags_l)
INST3(cmovge,           "cmovge",           IUM_WR, BAD_CODE,     BAD_CODE,     PCKFLT(0x4D),                            CcFlags_ge)
INST3(cmovle,           "cmovle",           IUM_WR, BAD_CODE,     BAD_CODE,     PCKFLT(0x4E),                            CcFlags_le)
INST3(cmovg,            "cmovg",            IUM_WR, BAD_CODE,     BAD_CODE,     PCKFLT(0x4F),                            CcFlags_g)

//    id                nm                  um      mr            mi            rm                                       flags
INSTA(FIRST_SSE_INSTRUCTION, lfence)
INST3(lfence,           "lfence",           IUM_RD, 0x0FE8AE,     BAD_CODE,     BAD_CODE,                                None)
INST3(mfence,           "mfence",           IUM_RD, 0x0FF0AE,     BAD_CODE,     BAD_CODE,                                None)
INST3(sfence,           "sfence",           IUM_RD, 0x0FF8AE,     BAD_CODE,     BAD_CODE,                                None)

INST3(prefetchnta,      "prefetchnta",      IUM_RD, 0x0F0018,     BAD_CODE,     BAD_CODE,                                None)
INST3(prefetcht0,       "prefetcht0",       IUM_RD, 0x0F0818,     BAD_CODE,     BAD_CODE,                                None)
INST3(prefetcht1,       "prefetcht1",       IUM_RD, 0x0F1018,     BAD_CODE,     BAD_CODE,                                None)
INST3(prefetcht2,       "prefetcht2",       IUM_RD, 0x0F1818,     BAD_CODE,     BAD_CODE,                                None)
INST3(movnti,           "movnti",           IUM_WR, PCKFLT(0xC3), BAD_CODE,     BAD_CODE,                                None)

INSTA(FIRST_SSE_VEX_INSTRUCTION, pmovmskb)
INST3(pmovmskb,         "pmovmskb",         IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0xD7),                            None)
INST3(movmskpd,         "movmskpd",         IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0x50),                            None)
INST3(movd,             "movd",             IUM_WR, PCKDBL(0x7E), BAD_CODE,     PCKDBL(0x6E),                            None) // Cleanup https://github.com/dotnet/runtime/issues/47943
INST3(movq,             "movq",             IUM_WR, PCKDBL(0xD6), BAD_CODE,     SSEFLT(0x7E),                            None) // Cleanup https://github.com/dotnet/runtime/issues/47943
INST3(movsd,            "movsd",            IUM_WR, SSEDBL(0x11), BAD_CODE,     SSEDBL(0x10),                            VexDstSrcSrc)
INST3(punpckldq,        "punpckldq",        IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0x62),                            VexDstDstSrc)
INST3(xorps,            "xorps",            IUM_WR, BAD_CODE,     BAD_CODE,     PCKFLT(0x57),                            VexDstDstSrc)
INST3(cvttsd2si,        "cvttsd2si",        IUM_WR, BAD_CODE,     BAD_CODE,     SSEDBL(0x2C),                            None)
INST3(movntdq,          "movntdq",          IUM_WR, PCKDBL(0xE7), BAD_CODE,     BAD_CODE,                                None)
INST3(movntpd,          "movntpd",          IUM_WR, PCKDBL(0x2B), BAD_CODE,     BAD_CODE,                                None)
INST3(movntps,          "movntps",          IUM_WR, PCKFLT(0x2B), BAD_CODE,     BAD_CODE,                                None)
INST3(movdqu,           "movdqu",           IUM_WR, SSEFLT(0x7F), BAD_CODE,     SSEFLT(0x6F),                            None)
INST3(movdqa,           "movdqa",           IUM_WR, PCKDBL(0x7F), BAD_CODE,     PCKDBL(0x6F),                            None)
INST3(movlpd,           "movlpd",           IUM_WR, PCKDBL(0x13), BAD_CODE,     PCKDBL(0x12),                            VexDstSrcSrc)
INST3(movlps,           "movlps",           IUM_WR, PCKFLT(0x13), BAD_CODE,     PCKFLT(0x12),                            VexDstSrcSrc)
INST3(movhpd,           "movhpd",           IUM_WR, PCKDBL(0x17), BAD_CODE,     PCKDBL(0x16),                            VexDstSrcSrc)
INST3(movhps,           "movhps",           IUM_WR, PCKFLT(0x17), BAD_CODE,     PCKFLT(0x16),                            VexDstSrcSrc)
INST3(movss,            "movss",            IUM_WR, SSEFLT(0x11), BAD_CODE,     SSEFLT(0x10),                            VexDstSrcSrc)
INST3(movapd,           "movapd",           IUM_WR, PCKDBL(0x29), BAD_CODE,     PCKDBL(0x28),                            None)
INST3(movaps,           "movaps",           IUM_WR, PCKFLT(0x29), BAD_CODE,     PCKFLT(0x28),                            None)
INST3(movupd,           "movupd",           IUM_WR, PCKDBL(0x11), BAD_CODE,     PCKDBL(0x10),                            None)
INST3(movups,           "movups",           IUM_WR, PCKFLT(0x11), BAD_CODE,     PCKFLT(0x10),                            None)
INST3(movhlps,          "movhlps",          IUM_WR, BAD_CODE,     BAD_CODE,     PCKFLT(0x12),                            VexDstDstSrc)
INST3(movlhps,          "movlhps",          IUM_WR, BAD_CODE,     BAD_CODE,     PCKFLT(0x16),                            VexDstDstSrc)
INST3(movmskps,         "movmskps",         IUM_WR, BAD_CODE,     BAD_CODE,     PCKFLT(0x50),                            None)
INST3(unpckhps,         "unpckhps",         IUM_WR, BAD_CODE,     BAD_CODE,     PCKFLT(0x15),                            VexDstDstSrc)
INST3(unpcklps,         "unpcklps",         IUM_WR, BAD_CODE,     BAD_CODE,     PCKFLT(0x14),                            VexDstDstSrc)
INST3(maskmovdqu,       "maskmovdqu",       IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0xF7),                            None)
INST3(shufps,           "shufps",           IUM_WR, BAD_CODE,     BAD_CODE,     PCKFLT(0xC6),                            VexDstDstSrc)
INST3(shufpd,           "shufpd",           IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0xC6),                            VexDstDstSrc)
INST3(punpckhdq,        "punpckhdq",        IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0x6A),                            VexDstDstSrc)
INST3(addps,            "addps",            IUM_WR, BAD_CODE,     BAD_CODE,     PCKFLT(0x58),                            VexDstDstSrc)
INST3(addss,            "addss",            IUM_WR, BAD_CODE,     BAD_CODE,     SSEFLT(0x58),                            VexDstDstSrc)
INST3(addpd,            "addpd",            IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0x58),                            VexDstDstSrc)
INST3(addsd,            "addsd",            IUM_WR, BAD_CODE,     BAD_CODE,     SSEDBL(0x58),                            VexDstDstSrc)
INST3(mulps,            "mulps",            IUM_WR, BAD_CODE,     BAD_CODE,     PCKFLT(0x59),                            VexDstDstSrc)
INST3(mulss,            "mulss",            IUM_WR, BAD_CODE,     BAD_CODE,     SSEFLT(0x59),                            VexDstDstSrc)
INST3(mulpd,            "mulpd",            IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0x59),                            VexDstDstSrc)
INST3(mulsd,            "mulsd",            IUM_WR, BAD_CODE,     BAD_CODE,     SSEDBL(0x59),                            VexDstDstSrc)
INST3(subps,            "subps",            IUM_WR, BAD_CODE,     BAD_CODE,     PCKFLT(0x5C),                            VexDstDstSrc)
INST3(subss,            "subss",            IUM_WR, BAD_CODE,     BAD_CODE,     SSEFLT(0x5C),                            VexDstDstSrc)
INST3(subpd,            "subpd",            IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0x5C),                            VexDstDstSrc)
INST3(subsd,            "subsd",            IUM_WR, BAD_CODE,     BAD_CODE,     SSEDBL(0x5C),                            VexDstDstSrc)
INST3(minps,            "minps",            IUM_WR, BAD_CODE,     BAD_CODE,     PCKFLT(0x5D),                            VexDstDstSrc)
INST3(minss,            "minss",            IUM_WR, BAD_CODE,     BAD_CODE,     SSEFLT(0x5D),                            VexDstDstSrc)
INST3(minpd,            "minpd",            IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0x5D),                            VexDstDstSrc)
INST3(minsd,            "minsd",            IUM_WR, BAD_CODE,     BAD_CODE,     SSEDBL(0x5D),                            VexDstDstSrc)
INST3(divps,            "divps",            IUM_WR, BAD_CODE,     BAD_CODE,     PCKFLT(0x5E),                            VexDstDstSrc)
INST3(divss,            "divss",            IUM_WR, BAD_CODE,     BAD_CODE,     SSEFLT(0x5E),                            VexDstDstSrc)
INST3(divpd,            "divpd",            IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0x5E),                            VexDstDstSrc)
INST3(divsd,            "divsd",            IUM_WR, BAD_CODE,     BAD_CODE,     SSEDBL(0x5E),                            VexDstDstSrc)
INST3(maxps,            "maxps",            IUM_WR, BAD_CODE,     BAD_CODE,     PCKFLT(0x5F),                            VexDstDstSrc)
INST3(maxss,            "maxss",            IUM_WR, BAD_CODE,     BAD_CODE,     SSEFLT(0x5F),                            VexDstDstSrc)
INST3(maxpd,            "maxpd",            IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0x5F),                            VexDstDstSrc)
INST3(maxsd,            "maxsd",            IUM_WR, BAD_CODE,     BAD_CODE,     SSEDBL(0x5F),                            VexDstDstSrc)
INST3(xorpd,            "xorpd",            IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0x57),                            VexDstDstSrc)
INST3(andps,            "andps",            IUM_WR, BAD_CODE,     BAD_CODE,     PCKFLT(0x54),                            VexDstDstSrc)
INST3(andpd,            "andpd",            IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0x54),                            VexDstDstSrc)
INST3(sqrtps,           "sqrtps",           IUM_WR, BAD_CODE,     BAD_CODE,     PCKFLT(0x51),                            None)
INST3(sqrtss,           "sqrtss",           IUM_WR, BAD_CODE,     BAD_CODE,     SSEFLT(0x51),                            VexDstSrcSrc)
INST3(sqrtpd,           "sqrtpd",           IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0x51),                            None)
INST3(sqrtsd,           "sqrtsd",           IUM_WR, BAD_CODE,     BAD_CODE,     SSEDBL(0x51),                            VexDstSrcSrc)
INST3(andnps,           "andnps",           IUM_WR, BAD_CODE,     BAD_CODE,     PCKFLT(0x55),                            VexDstDstSrc)
INST3(andnpd,           "andnpd",           IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0x55),                            VexDstDstSrc)
INST3(orps,             "orps",             IUM_WR, BAD_CODE,     BAD_CODE,     PCKFLT(0x56),                            VexDstDstSrc)
INST3(orpd,             "orpd",             IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0x56),                            VexDstDstSrc)
INST3(haddpd,           "haddpd",           IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0x7C),                            VexDstDstSrc)
INST3(haddps,           "haddps",           IUM_WR, BAD_CODE,     BAD_CODE,     SSEDBL(0x7C),                            VexDstDstSrc)
INST3(hsubpd,           "hsubpd",           IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0x7D),                            VexDstDstSrc)
INST3(hsubps,           "hsubps",           IUM_WR, BAD_CODE,     BAD_CODE,     SSEDBL(0x7D),                            VexDstDstSrc)
INST3(addsubps,         "addsubps",         IUM_WR, BAD_CODE,     BAD_CODE,     SSEDBL(0xD0),                            VexDstDstSrc)
INST3(addsubpd,         "addsubpd",         IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0xD0),                            VexDstDstSrc)
INST3(rcpps,            "rcpps",            IUM_WR, BAD_CODE,     BAD_CODE,     PCKFLT(0x53),                            None)
INST3(rcpss,            "rcpss",            IUM_WR, BAD_CODE,     BAD_CODE,     SSEFLT(0x53),                            VexDstSrcSrc)
INST3(rsqrtps,          "rsqrtps",          IUM_WR, BAD_CODE,     BAD_CODE,     PCKFLT(0x52),                            None)
INST3(rsqrtss,          "rsqrtss",          IUM_WR, BAD_CODE,     BAD_CODE,     SSEFLT(0x52),                            VexDstSrcSrc)
INST3(cvtpi2ps,         "cvtpi2ps",         IUM_WR, BAD_CODE,     BAD_CODE,     PCKFLT(0x2A),                            None)
INST3(cvtsi2ss,         "cvtsi2ss",         IUM_WR, BAD_CODE,     BAD_CODE,     SSEFLT(0x2A),                            VexDstDstSrc)
INST3(cvtpi2pd,         "cvtpi2pd",         IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0x2A),                            None)
INST3(cvtsi2sd,         "cvtsi2sd",         IUM_WR, BAD_CODE,     BAD_CODE,     SSEDBL(0x2A),                            VexDstDstSrc)
INST3(cvttps2pi,        "cvttps2pi",        IUM_WR, BAD_CODE,     BAD_CODE,     PCKFLT(0x2C),                            None)
INST3(cvttss2si,        "cvttss2si",        IUM_WR, BAD_CODE,     BAD_CODE,     SSEFLT(0x2C),                            None)
INST3(cvttpd2pi,        "cvttpd2pi",        IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0x2C),                            None)
INST3(cvtps2pi,         "cvtps2pi",         IUM_WR, BAD_CODE,     BAD_CODE,     PCKFLT(0x2D),                            None)
INST3(cvtss2si,         "cvtss2si",         IUM_WR, BAD_CODE,     BAD_CODE,     SSEFLT(0x2D),                            None)
INST3(cvtpd2pi,         "cvtpd2pi",         IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0x2D),                            None)
INST3(cvtsd2si,         "cvtsd2si",         IUM_WR, BAD_CODE,     BAD_CODE,     SSEDBL(0x2D),                            None)
INST3(cvtps2pd,         "cvtps2pd",         IUM_WR, BAD_CODE,     BAD_CODE,     PCKFLT(0x5A),                            None)
INST3(cvtpd2ps,         "cvtpd2ps",         IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0x5A),                            None)
INST3(cvtss2sd,         "cvtss2sd",         IUM_WR, BAD_CODE,     BAD_CODE,     SSEFLT(0x5A),                            VexDstDstSrc)
INST3(cvtsd2ss,         "cvtsd2ss",         IUM_WR, BAD_CODE,     BAD_CODE,     SSEDBL(0x5A),                            VexDstDstSrc)
INST3(cvtdq2ps,         "cvtdq2ps",         IUM_WR, BAD_CODE,     BAD_CODE,     PCKFLT(0x5B),                            None)
INST3(cvtps2dq,         "cvtps2dq",         IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0x5B),                            None)
INST3(cvttps2dq,        "cvttps2dq",        IUM_WR, BAD_CODE,     BAD_CODE,     SSEFLT(0x5B),                            None)
INST3(cvtpd2dq,         "cvtpd2dq",         IUM_WR, BAD_CODE,     BAD_CODE,     SSEDBL(0xE6),                            None)
INST3(cvttpd2dq,        "cvttpd2dq",        IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0xE6),                            None)
INST3(cvtdq2pd,         "cvtdq2pd",         IUM_WR, BAD_CODE,     BAD_CODE,     SSEFLT(0xE6),                            None)
INST3(comiss,           "comiss",           IUM_RD, BAD_CODE,     BAD_CODE,     PCKFLT(0x2F),                            FComFlags)
INST3(comisd,           "comisd",           IUM_RD, BAD_CODE,     BAD_CODE,     PCKDBL(0x2F),                            FComFlags)
INST3(ucomiss,          "ucomiss",          IUM_RD, BAD_CODE,     BAD_CODE,     PCKFLT(0x2E),                            FComFlags)
INST3(ucomisd,          "ucomisd",          IUM_RD, BAD_CODE,     BAD_CODE,     PCKDBL(0x2E),                            FComFlags)
INST3(cmpps,            "cmpps",            IUM_WR, BAD_CODE,     BAD_CODE,     PCKFLT(0xC2),                            VexDstDstSrc)
INST3(cmppd,            "cmppd",            IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0xC2),                            VexDstDstSrc)
INST3(cmpss,            "cmpss",            IUM_WR, BAD_CODE,     BAD_CODE,     SSEFLT(0xC2),                            VexDstDstSrc)
INST3(cmpsd,            "cmpsd",            IUM_WR, BAD_CODE,     BAD_CODE,     SSEDBL(0xC2),                            VexDstDstSrc)
INST3(paddb,            "paddb",            IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0xFC),                            VexDstDstSrc)
INST3(paddw,            "paddw",            IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0xFD),                            VexDstDstSrc)
INST3(paddd,            "paddd",            IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0xFE),                            VexDstDstSrc)
INST3(paddq,            "paddq",            IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0xD4),                            VexDstDstSrc)
INST3(paddsb,           "paddsb",           IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0xEC),                            VexDstDstSrc)
INST3(paddsw,           "paddsw",           IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0xED),                            VexDstDstSrc)
INST3(paddusb,          "paddusb",          IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0xDC),                            VexDstDstSrc)
INST3(paddusw,          "paddusw",          IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0xDD),                            VexDstDstSrc)
INST3(pavgb,            "pavgb",            IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0xE0),                            VexDstDstSrc)
INST3(pavgw,            "pavgw",            IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0xE3),                            VexDstDstSrc)
INST3(psubb,            "psubb",            IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0xF8),                            VexDstDstSrc)
INST3(psubw,            "psubw",            IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0xF9),                            VexDstDstSrc)
INST3(psubd,            "psubd",            IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0xFA),                            VexDstDstSrc)
INST3(psubq,            "psubq",            IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0xFB),                            VexDstDstSrc)
INST3(pmaddwd,          "pmaddwd",          IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0xF5),                            VexDstDstSrc)
INST3(pmulhw,           "pmulhw",           IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0xE5),                            VexDstDstSrc)
INST3(pmulhuw,          "pmulhuw",          IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0xE4),                            VexDstDstSrc)
INST3(pmuludq,          "pmuludq",          IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0xF4),                            VexDstDstSrc)
INST3(pmullw,           "pmullw",           IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0xD5),                            VexDstDstSrc)
INST3(pand,             "pand",             IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0xDB),                            VexDstDstSrc)
INST3(pandn,            "pandn",            IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0xDF),                            VexDstDstSrc)
INST3(por,              "por",              IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0xEB),                            VexDstDstSrc)
INST3(pxor,             "pxor",             IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0xEF),                            VexDstDstSrc)
INST3(psadbw,           "psadbw",           IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0xF6),                            VexDstDstSrc)
INST3(psubsb,           "psubsb",           IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0xE8),                            VexDstDstSrc)
INST3(psubusb,          "psubusb",          IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0xD8),                            VexDstDstSrc)
INST3(psubsw,           "psubsw",           IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0xE9),                            VexDstDstSrc)
INST3(psubusw,          "psubusw",          IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0xD9),                            VexDstDstSrc)

INST3(psrldq,           "psrldq",           IUM_WR, BAD_CODE,     PCKDBL(0x1873), BAD_CODE,                              VexDstDstSrc)
INST3(pslldq,           "pslldq",           IUM_WR, BAD_CODE,     PCKDBL(0x3873), BAD_CODE,                              VexDstDstSrc)
INST3(psllw,            "psllw",            IUM_WR, BAD_CODE,     PCKDBL(0x3071), PCKDBL(0xF1),                          VexDstDstSrc)
INST3(pslld,            "pslld",            IUM_WR, BAD_CODE,     PCKDBL(0x3072), PCKDBL(0xF2),                          VexDstDstSrc)
INST3(psllq,            "psllq",            IUM_WR, BAD_CODE,     PCKDBL(0x3073), PCKDBL(0xF3),                          VexDstDstSrc)
INST3(psrlw,            "psrlw",            IUM_WR, BAD_CODE,     PCKDBL(0x1071), PCKDBL(0xD1),                          VexDstDstSrc)
INST3(psrld,            "psrld",            IUM_WR, BAD_CODE,     PCKDBL(0x1072), PCKDBL(0xD2),                          VexDstDstSrc)
INST3(psrlq,            "psrlq",            IUM_WR, BAD_CODE,     PCKDBL(0x1073), PCKDBL(0xD3),                          VexDstDstSrc)
INST3(psraw,            "psraw",            IUM_WR, BAD_CODE,     PCKDBL(0x2071), PCKDBL(0xE1),                          VexDstDstSrc)
INST3(psrad,            "psrad",            IUM_WR, BAD_CODE,     PCKDBL(0x2072), PCKDBL(0xE2),                          VexDstDstSrc)

INST3(pmaxub,           "pmaxub",           IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0xDE),                            VexDstDstSrc)
INST3(pminub,           "pminub",           IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0xDA),                            VexDstDstSrc)
INST3(pmaxsw,           "pmaxsw",           IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0xEE),                            VexDstDstSrc)
INST3(pminsw,           "pminsw",           IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0xEA),                            VexDstDstSrc)
INST3(pcmpeqd,          "pcmpeqd",          IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0x76),                            VexDstDstSrc)
INST3(pcmpgtd,          "pcmpgtd",          IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0x66),                            VexDstDstSrc)
INST3(pcmpeqw,          "pcmpeqw",          IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0x75),                            VexDstDstSrc)
INST3(pcmpgtw,          "pcmpgtw",          IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0x65),                            VexDstDstSrc)
INST3(pcmpeqb,          "pcmpeqb",          IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0x74),                            VexDstDstSrc)
INST3(pcmpgtb,          "pcmpgtb",          IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0x64),                            VexDstDstSrc)
INST3(pshufd,           "pshufd",           IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0x70),                            None)
INST3(pshufhw,          "pshufhw",          IUM_WR, BAD_CODE,     BAD_CODE,     SSEFLT(0x70),                            None)
INST3(pshuflw,          "pshuflw",          IUM_WR, BAD_CODE,     BAD_CODE,     SSEDBL(0x70),                            None)
INST3(pextrw,           "pextrw",           IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0xC5),                            None)
INST3(pinsrw,           "pinsrw",           IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0xC4),                            VexDstDstSrc)
INST3(punpckhbw,        "punpckhbw",        IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0x68),                            VexDstDstSrc)
INST3(punpcklbw,        "punpcklbw",        IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0x60),                            VexDstDstSrc)
INST3(punpckhqdq,       "punpckhqdq",       IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0x6D),                            VexDstDstSrc)
INST3(punpcklqdq,       "punpcklqdq",       IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0x6C),                            VexDstDstSrc)
INST3(punpckhwd,        "punpckhwd",        IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0x69),                            VexDstDstSrc)
INST3(punpcklwd,        "punpcklwd",        IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0x61),                            VexDstDstSrc)
INST3(unpckhpd,         "unpckhpd",         IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0x15),                            VexDstDstSrc)
INST3(unpcklpd,         "unpcklpd",         IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0x14),                            VexDstDstSrc)
INST3(packssdw,         "packssdw",         IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0x6B),                            VexDstDstSrc)
INST3(packsswb,         "packsswb",         IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0x63),                            VexDstDstSrc)
INST3(packuswb,         "packuswb",         IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0x67),                            VexDstDstSrc)

//    id                nm                  um      mr            mi            rm                                       flags
INST3(dpps,             "dpps",             IUM_WR, BAD_CODE,     BAD_CODE,     SSE3A(0x40),                             VexDstDstSrc)
INST3(dppd,             "dppd",             IUM_WR, BAD_CODE,     BAD_CODE,     SSE3A(0x41),                             VexDstDstSrc)
INST3(insertps,         "insertps",         IUM_WR, BAD_CODE,     BAD_CODE,     SSE3A(0x21),                             VexDstDstSrc)
INST3(pcmpeqq,          "pcmpeqq",          IUM_WR, BAD_CODE,     BAD_CODE,     SSE38(0x29),                             VexDstDstSrc)
INST3(pcmpgtq,          "pcmpgtq",          IUM_WR, BAD_CODE,     BAD_CODE,     SSE38(0x37),                             VexDstDstSrc)
INST3(pmulld,           "pmulld",           IUM_WR, BAD_CODE,     BAD_CODE,     SSE38(0x40),                             VexDstDstSrc)
INST3(ptest,            "ptest",            IUM_WR, BAD_CODE,     BAD_CODE,     SSE38(0x17),                             None)
INST3(phaddd,           "phaddd",           IUM_WR, BAD_CODE,     BAD_CODE,     SSE38(0x02),                             VexDstDstSrc)
INST3(pabsb,            "pabsb",            IUM_WR, BAD_CODE,     BAD_CODE,     SSE38(0x1C),                             None)
INST3(pabsw,            "pabsw",            IUM_WR, BAD_CODE,     BAD_CODE,     SSE38(0x1D),                             None)
INST3(pabsd,            "pabsd",            IUM_WR, BAD_CODE,     BAD_CODE,     SSE38(0x1E),                             None)
INST3(palignr,          "palignr",          IUM_WR, BAD_CODE,     BAD_CODE,     SSE3A(0x0F),                             VexDstDstSrc)
INST3(pmaddubsw,        "pmaddubsw",        IUM_WR, BAD_CODE,     BAD_CODE,     SSE38(0x04),                             VexDstDstSrc)
INST3(pmulhrsw,         "pmulhrsw",         IUM_WR, BAD_CODE,     BAD_CODE,     SSE38(0x0B),                             VexDstDstSrc)
INST3(pshufb,           "pshufb",           IUM_WR, BAD_CODE,     BAD_CODE,     SSE38(0x00),                             VexDstDstSrc)
INST3(psignb,           "psignb",           IUM_WR, BAD_CODE,     BAD_CODE,     SSE38(0x08),                             VexDstDstSrc)
INST3(psignw,           "psignw",           IUM_WR, BAD_CODE,     BAD_CODE,     SSE38(0x09),                             VexDstDstSrc)
INST3(psignd,           "psignd",           IUM_WR, BAD_CODE,     BAD_CODE,     SSE38(0x0A),                             VexDstDstSrc)
INST3(pminsb,           "pminsb",           IUM_WR, BAD_CODE,     BAD_CODE,     SSE38(0x38),                             VexDstDstSrc)
INST3(pminsd,           "pminsd",           IUM_WR, BAD_CODE,     BAD_CODE,     SSE38(0x39),                             VexDstDstSrc)
INST3(pminuw,           "pminuw",           IUM_WR, BAD_CODE,     BAD_CODE,     SSE38(0x3A),                             VexDstDstSrc)
INST3(pminud,           "pminud",           IUM_WR, BAD_CODE,     BAD_CODE,     SSE38(0x3B),                             VexDstDstSrc)
INST3(pmaxsb,           "pmaxsb",           IUM_WR, BAD_CODE,     BAD_CODE,     SSE38(0x3C),                             VexDstDstSrc)
INST3(pmaxsd,           "pmaxsd",           IUM_WR, BAD_CODE,     BAD_CODE,     SSE38(0x3D),                             VexDstDstSrc)
INST3(pmaxuw,           "pmaxuw",           IUM_WR, BAD_CODE,     BAD_CODE,     SSE38(0x3E),                             VexDstDstSrc)
INST3(pmaxud,           "pmaxud",           IUM_WR, BAD_CODE,     BAD_CODE,     SSE38(0x3F),                             VexDstDstSrc)
INST3(pmovsxbw,         "pmovsxbw",         IUM_WR, BAD_CODE,     BAD_CODE,     SSE38(0x20),                             None)
INST3(pmovsxbd,         "pmovsxbd",         IUM_WR, BAD_CODE,     BAD_CODE,     SSE38(0x21),                             None)
INST3(pmovsxbq,         "pmovsxbq",         IUM_WR, BAD_CODE,     BAD_CODE,     SSE38(0x22),                             None)
INST3(pmovsxwd,         "pmovsxwd",         IUM_WR, BAD_CODE,     BAD_CODE,     SSE38(0x23),                             None)
INST3(pmovsxwq,         "pmovsxwq",         IUM_WR, BAD_CODE,     BAD_CODE,     SSE38(0x24),                             None)
INST3(pmovsxdq,         "pmovsxdq",         IUM_WR, BAD_CODE,     BAD_CODE,     SSE38(0x25),                             None)
INST3(pmovzxbw,         "pmovzxbw",         IUM_WR, BAD_CODE,     BAD_CODE,     SSE38(0x30),                             None)
INST3(pmovzxbd,         "pmovzxbd",         IUM_WR, BAD_CODE,     BAD_CODE,     SSE38(0x31),                             None)
INST3(pmovzxbq,         "pmovzxbq",         IUM_WR, BAD_CODE,     BAD_CODE,     SSE38(0x32),                             None)
INST3(pmovzxwd,         "pmovzxwd",         IUM_WR, BAD_CODE,     BAD_CODE,     SSE38(0x33),                             None)
INST3(pmovzxwq,         "pmovzxwq",         IUM_WR, BAD_CODE,     BAD_CODE,     SSE38(0x34),                             None)
INST3(pmovzxdq,         "pmovzxdq",         IUM_WR, BAD_CODE,     BAD_CODE,     SSE38(0x35),                             None)
INST3(packusdw,         "packusdw",         IUM_WR, BAD_CODE,     BAD_CODE,     SSE38(0x2B),                             VexDstDstSrc)
INST3(roundps,          "roundps",          IUM_WR, BAD_CODE,     BAD_CODE,     SSE3A(0x08),                             None)
INST3(roundss,          "roundss",          IUM_WR, BAD_CODE,     BAD_CODE,     SSE3A(0x0A),                             VexDstSrcSrc)
INST3(roundpd,          "roundpd",          IUM_WR, BAD_CODE,     BAD_CODE,     SSE3A(0x09),                             None)
INST3(roundsd,          "roundsd",          IUM_WR, BAD_CODE,     BAD_CODE,     SSE3A(0x0B),                             VexDstSrcSrc)
INST3(pmuldq,           "pmuldq",           IUM_WR, BAD_CODE,     BAD_CODE,     SSE38(0x28),                             VexDstDstSrc)
INST3(blendps,          "blendps",          IUM_WR, BAD_CODE,     BAD_CODE,     SSE3A(0x0C),                             VexDstDstSrc)
INST3(blendvps,         "blendvps",         IUM_WR, BAD_CODE,     BAD_CODE,     SSE38(0x14),                             None)
INST3(blendpd,          "blendpd",          IUM_WR, BAD_CODE,     BAD_CODE,     SSE3A(0x0D),                             VexDstDstSrc)
INST3(blendvpd,         "blendvpd",         IUM_WR, BAD_CODE,     BAD_CODE,     SSE38(0x15),                             None)
INST3(pblendw,          "pblendw",          IUM_WR, BAD_CODE,     BAD_CODE,     SSE3A(0x0E),                             VexDstDstSrc)
INST3(pblendvb,         "pblendvb",         IUM_WR, BAD_CODE,     BAD_CODE,     SSE38(0x10),                             None)
INST3(phaddw,           "phaddw",           IUM_WR, BAD_CODE,     BAD_CODE,     SSE38(0x01),                             VexDstDstSrc)
INST3(phsubw,           "phsubw",           IUM_WR, BAD_CODE,     BAD_CODE,     SSE38(0x05),                             VexDstDstSrc)
INST3(phsubd,           "phsubd",           IUM_WR, BAD_CODE,     BAD_CODE,     SSE38(0x06),                             VexDstDstSrc)
INST3(phaddsw,          "phaddsw",          IUM_WR, BAD_CODE,     BAD_CODE,     SSE38(0x03),                             VexDstDstSrc)
INST3(phsubsw,          "phsubsw",          IUM_WR, BAD_CODE,     BAD_CODE,     SSE38(0x07),                             VexDstDstSrc)
INST3(lddqu,            "lddqu",            IUM_WR, BAD_CODE,     BAD_CODE,     SSEDBL(0xF0),                            None)
INST3(movntdqa,         "movntdqa",         IUM_WR, BAD_CODE,     BAD_CODE,     SSE38(0x2A),                             None)
INST3(movddup,          "movddup",          IUM_WR, BAD_CODE,     BAD_CODE,     SSEDBL(0x12),                            None)
INST3(movsldup,         "movsldup",         IUM_WR, BAD_CODE,     BAD_CODE,     SSEFLT(0x12),                            None)
INST3(movshdup,         "movshdup",         IUM_WR, BAD_CODE,     BAD_CODE,     SSEFLT(0x16),                            None)
INST3(phminposuw,       "phminposuw",       IUM_WR, BAD_CODE,     BAD_CODE,     SSE38(0x41),                             None)
INST3(mpsadbw,          "mpsadbw",          IUM_WR, BAD_CODE,     BAD_CODE,     SSE3A(0x42),                             VexDstDstSrc)
INST3(pinsrb,           "pinsrb",           IUM_WR, BAD_CODE,     BAD_CODE,     SSE3A(0x20),                             VexDstDstSrc)
INST3(pinsrd,           "pinsrd",           IUM_WR, BAD_CODE,     BAD_CODE,     SSE3A(0x22),                             VexDstDstSrc)
INST3(pinsrq,           "pinsrq",           IUM_WR, BAD_CODE,     BAD_CODE,     SSE3A(0x22),                             VexDstDstSrc)
INST3(pextrb,           "pextrb",           IUM_WR, SSE3A(0x14),  BAD_CODE,     BAD_CODE,                                None)
INST3(pextrd,           "pextrd",           IUM_WR, SSE3A(0x16),  BAD_CODE,     BAD_CODE,                                None)
INST3(pextrq,           "pextrq",           IUM_WR, SSE3A(0x16),  BAD_CODE,     BAD_CODE,                                None)
INST3(pextrw_sse41,     "pextrw",           IUM_WR, SSE3A(0x15),  BAD_CODE,     BAD_CODE,                                None)
INST3(extractps,        "extractps",        IUM_WR, SSE3A(0x17),  BAD_CODE,     BAD_CODE,                                None)

INST3(pclmulqdq,        "pclmulqdq" ,       IUM_WR, BAD_CODE,     BAD_CODE,     SSE3A(0x44),                             VexDstDstSrc)

INST3(aesdec,           "aesdec",           IUM_WR, BAD_CODE,     BAD_CODE,     SSE38(0xDE),                             VexDstDstSrc)
INST3(aesdeclast,       "aesdeclast",       IUM_WR, BAD_CODE,     BAD_CODE,     SSE38(0xDF),                             VexDstDstSrc)
INST3(aesenc,           "aesenc",           IUM_WR, BAD_CODE,     BAD_CODE,     SSE38(0xDC),                             VexDstDstSrc)
INST3(aesenclast,       "aesenclast",       IUM_WR, BAD_CODE,     BAD_CODE,     SSE38(0xDD),                             VexDstDstSrc)
INST3(aesimc,           "aesimc",           IUM_WR, BAD_CODE,     BAD_CODE,     SSE38(0xDB),                             None)
INST3(aeskeygenassist,  "aeskeygenassist",  IUM_WR, BAD_CODE,     BAD_CODE,     SSE3A(0xDF),                             None)
INSTA(LAST_SSE_INSTRUCTION, aeskeygenassist)

//INSTA(FIRST_AVX_INSTRUCTION, vbroadcastss)
INST3(vbroadcastss,     "vbroadcastss",     IUM_WR, BAD_CODE,     BAD_CODE,     SSE38(0x18),                             None)
INST3(vbroadcastsd,     "vbroadcastsd",     IUM_WR, BAD_CODE,     BAD_CODE,     SSE38(0x19),                             None)
INST3(vpbroadcastb,     "vpbroadcastb",     IUM_WR, BAD_CODE,     BAD_CODE,     SSE38(0x78),                             None)
INST3(vpbroadcastw,     "vpbroadcastw",     IUM_WR, BAD_CODE,     BAD_CODE,     SSE38(0x79),                             None)
INST3(vpbroadcastd,     "vpbroadcastd",     IUM_WR, BAD_CODE,     BAD_CODE,     SSE38(0x58),                             None)
INST3(vpbroadcastq,     "vpbroadcastq",     IUM_WR, BAD_CODE,     BAD_CODE,     SSE38(0x59),                             None)
INST3(vextractf128,     "vextractf128",     IUM_WR, SSE3A(0x19),  BAD_CODE,     BAD_CODE,                                None)
INST3(vextracti128,     "vextracti128",     IUM_WR, SSE3A(0x39),  BAD_CODE,     BAD_CODE,                                None)
INST3(vinsertf128,      "vinsertf128",      IUM_WR, BAD_CODE,     BAD_CODE,     SSE3A(0x18),                             VexDstDstSrc)
INST3(vinserti128,      "vinserti128",      IUM_WR, BAD_CODE,     BAD_CODE,     SSE3A(0x38),                             VexDstDstSrc)
INST3(vperm2i128,       "vperm2i128",       IUM_WR, BAD_CODE,     BAD_CODE,     SSE3A(0x46),                             VexDstDstSrc)
INST3(vpermq,           "vpermq",           IUM_WR, BAD_CODE,     BAD_CODE,     SSE3A(0x00),                             None)
INST3(vpblendd,         "vpblendd",         IUM_WR, BAD_CODE,     BAD_CODE,     SSE3A(0x02),                             VexDstDstSrc)
INST3(vblendvps,        "vblendvps",        IUM_WR, BAD_CODE,     BAD_CODE,     SSE3A(0x4A),                             VexDstDstSrc)
INST3(vblendvpd,        "vblendvpd",        IUM_WR, BAD_CODE,     BAD_CODE,     SSE3A(0x4B),                             VexDstDstSrc)
INST3(vpblendvb,        "vpblendvb",        IUM_WR, BAD_CODE,     BAD_CODE,     SSE3A(0x4C),                             VexDstDstSrc)
INST3(vtestps,          "vtestps",          IUM_WR, BAD_CODE,     BAD_CODE,     SSE38(0x0E),                             None)
INST3(vtestpd,          "vtestpd",          IUM_WR, BAD_CODE,     BAD_CODE,     SSE38(0x0F),                             None)
INST3(vpsrlvd,          "vpsrlvd",          IUM_WR, BAD_CODE,     BAD_CODE,     SSE38(0x45),                             VexDstDstSrc)
INST3(vpsrlvq,          "vpsrlvq",          IUM_WR, BAD_CODE,     BAD_CODE,     SSE38(0x45),                             VexDstDstSrc)
INST3(vpsravd,          "vpsravd",          IUM_WR, BAD_CODE,     BAD_CODE,     SSE38(0x46),                             VexDstDstSrc)
INST3(vpsllvd,          "vpsllvd",          IUM_WR, BAD_CODE,     BAD_CODE,     SSE38(0x47),                             VexDstDstSrc)
INST3(vpsllvq,          "vpsllvq",          IUM_WR, BAD_CODE,     BAD_CODE,     SSE38(0x47),                             VexDstDstSrc)
INST3(vpermilps,        "vpermilps",        IUM_WR, BAD_CODE,     BAD_CODE,     SSE3A(0x04),                             None)
INST3(vpermilpd,        "vpermilpd",        IUM_WR, BAD_CODE,     BAD_CODE,     SSE3A(0x05),                             None)
INST3(vpermilpsvar,     "vpermilpsvar",     IUM_WR, BAD_CODE,     BAD_CODE,     SSE38(0x0C),                             VexDstDstSrc)
INST3(vpermilpdvar,     "vpermilpdvar",     IUM_WR, BAD_CODE,     BAD_CODE,     SSE38(0x0D),                             VexDstDstSrc)
INST3(vperm2f128,       "vperm2f128",       IUM_WR, BAD_CODE,     BAD_CODE,     SSE3A(0x06),                             VexDstDstSrc)
INST3(vpermpd,          "vpermpd",          IUM_WR, BAD_CODE,     BAD_CODE,     SSE3A(0x01),                             None)
INST3(vpermd,           "vpermd",           IUM_WR, BAD_CODE,     BAD_CODE,     SSE38(0x36),                             VexDstDstSrc)
INST3(vpermps,          "vpermps",          IUM_WR, BAD_CODE,     BAD_CODE,     SSE38(0x16),                             VexDstDstSrc)
INST3(vbroadcastf128,   "vbroadcastf128",   IUM_WR, BAD_CODE,     BAD_CODE,     SSE38(0x1A),                             None)
INST3(vbroadcasti128,   "vbroadcasti128",   IUM_WR, BAD_CODE,     BAD_CODE,     SSE38(0x5A),                             None)
INST3(vmaskmovps,       "vmaskmovps",       IUM_WR, SSE38(0x2E),  BAD_CODE,     SSE38(0x2C),                             VexDstDstSrc)
INST3(vmaskmovpd,       "vmaskmovpd",       IUM_WR, SSE38(0x2F),  BAD_CODE,     SSE38(0x2D),                             VexDstDstSrc)
INST3(vpmaskmovd,       "vpmaskmovd",       IUM_WR, SSE38(0x8E),  BAD_CODE,     SSE38(0x8C),                             VexDstDstSrc)
INST3(vpmaskmovq,       "vpmaskmovq",       IUM_WR, SSE38(0x8E),  BAD_CODE,     SSE38(0x8C),                             VexDstDstSrc)
INST3(vpgatherdd,       "vpgatherdd",       IUM_WR, BAD_CODE,     BAD_CODE,     SSE38(0x90),                             VexDstDstSrc)
INST3(vpgatherqd,       "vpgatherqd",       IUM_WR, BAD_CODE,     BAD_CODE,     SSE38(0x91),                             VexDstDstSrc)
INST3(vpgatherdq,       "vpgatherdq",       IUM_WR, BAD_CODE,     BAD_CODE,     SSE38(0x90),                             VexDstDstSrc)
INST3(vpgatherqq,       "vpgatherqq",       IUM_WR, BAD_CODE,     BAD_CODE,     SSE38(0x91),                             VexDstDstSrc)
INST3(vgatherdps,       "vgatherdps",       IUM_WR, BAD_CODE,     BAD_CODE,     SSE38(0x92),                             VexDstDstSrc)
INST3(vgatherqps,       "vgatherqps",       IUM_WR, BAD_CODE,     BAD_CODE,     SSE38(0x93),                             VexDstDstSrc)
INST3(vgatherdpd,       "vgatherdpd",       IUM_WR, BAD_CODE,     BAD_CODE,     SSE38(0x92),                             VexDstDstSrc)
INST3(vgatherqpd,       "vgatherqpd",       IUM_WR, BAD_CODE,     BAD_CODE,     SSE38(0x93),                             VexDstDstSrc)

//    id                nm                  um      mr            mi            rm                                       flags
INSTA(FIRST_FMA_INSTRUCTION, vfmadd132pd)
INST3(vfmadd132pd,      "vfmadd132pd",      IUM_WR, BAD_CODE,     BAD_CODE,     SSE38(0x98),                             VexDstDstSrc)
INST3(vfmadd213pd,      "vfmadd213pd",      IUM_WR, BAD_CODE,     BAD_CODE,     SSE38(0xA8),                             VexDstDstSrc)
INST3(vfmadd231pd,      "vfmadd231pd",      IUM_WR, BAD_CODE,     BAD_CODE,     SSE38(0xB8),                             VexDstDstSrc)
INST3(vfmadd132ps,      "vfmadd132ps",      IUM_WR, BAD_CODE,     BAD_CODE,     SSE38(0x98),                             VexDstDstSrc)
INST3(vfmadd213ps,      "vfmadd213ps",      IUM_WR, BAD_CODE,     BAD_CODE,     SSE38(0xA8),                             VexDstDstSrc)
INST3(vfmadd231ps,      "vfmadd231ps",      IUM_WR, BAD_CODE,     BAD_CODE,     SSE38(0xB8),                             VexDstDstSrc)
INST3(vfmadd132sd,      "vfmadd132sd",      IUM_WR, BAD_CODE,     BAD_CODE,     SSE38(0x99),                             VexDstDstSrc)
INST3(vfmadd213sd,      "vfmadd213sd",      IUM_WR, BAD_CODE,     BAD_CODE,     SSE38(0xA9),                             VexDstDstSrc)
INST3(vfmadd231sd,      "vfmadd231sd",      IUM_WR, BAD_CODE,     BAD_CODE,     SSE38(0xB9),                             VexDstDstSrc)
INST3(vfmadd132ss,      "vfmadd132ss",      IUM_WR, BAD_CODE,     BAD_CODE,     SSE38(0x99),                             VexDstDstSrc)
INST3(vfmadd213ss,      "vfmadd213ss",      IUM_WR, BAD_CODE,     BAD_CODE,     SSE38(0xA9),                             VexDstDstSrc)
INST3(vfmadd231ss,      "vfmadd231ss",      IUM_WR, BAD_CODE,     BAD_CODE,     SSE38(0xB9),                             VexDstDstSrc)
INST3(vfmaddsub132pd,   "vfmaddsub132pd",   IUM_WR, BAD_CODE,     BAD_CODE,     SSE38(0x96),                             VexDstDstSrc)
INST3(vfmaddsub213pd,   "vfmaddsub213pd",   IUM_WR, BAD_CODE,     BAD_CODE,     SSE38(0xA6),                             VexDstDstSrc)
INST3(vfmaddsub231pd,   "vfmaddsub231pd",   IUM_WR, BAD_CODE,     BAD_CODE,     SSE38(0xB6),                             VexDstDstSrc)
INST3(vfmaddsub132ps,   "vfmaddsub132ps",   IUM_WR, BAD_CODE,     BAD_CODE,     SSE38(0x96),                             VexDstDstSrc)
INST3(vfmaddsub213ps,   "vfmaddsub213ps",   IUM_WR, BAD_CODE,     BAD_CODE,     SSE38(0xA6),                             VexDstDstSrc)
INST3(vfmaddsub231ps,   "vfmaddsub231ps",   IUM_WR, BAD_CODE,     BAD_CODE,     SSE38(0xB6),                             VexDstDstSrc)
INST3(vfmsubadd132pd,   "vfmsubadd132pd",   IUM_WR, BAD_CODE,     BAD_CODE,     SSE38(0x97),                             VexDstDstSrc)
INST3(vfmsubadd213pd,   "vfmsubadd213pd",   IUM_WR, BAD_CODE,     BAD_CODE,     SSE38(0xA7),                             VexDstDstSrc)
INST3(vfmsubadd231pd,   "vfmsubadd231pd",   IUM_WR, BAD_CODE,     BAD_CODE,     SSE38(0xB7),                             VexDstDstSrc)
INST3(vfmsubadd132ps,   "vfmsubadd132ps",   IUM_WR, BAD_CODE,     BAD_CODE,     SSE38(0x97),                             VexDstDstSrc)
INST3(vfmsubadd213ps,   "vfmsubadd213ps",   IUM_WR, BAD_CODE,     BAD_CODE,     SSE38(0xA7),                             VexDstDstSrc)
INST3(vfmsubadd231ps,   "vfmsubadd231ps",   IUM_WR, BAD_CODE,     BAD_CODE,     SSE38(0xB7),                             VexDstDstSrc)
INST3(vfmsub132pd,      "vfmsub132pd",      IUM_WR, BAD_CODE,     BAD_CODE,     SSE38(0x9A),                             VexDstDstSrc)
INST3(vfmsub213pd,      "vfmsub213pd",      IUM_WR, BAD_CODE,     BAD_CODE,     SSE38(0xAA),                             VexDstDstSrc)
INST3(vfmsub231pd,      "vfmsub231pd",      IUM_WR, BAD_CODE,     BAD_CODE,     SSE38(0xBA),                             VexDstDstSrc)
INST3(vfmsub132ps,      "vfmsub132ps",      IUM_WR, BAD_CODE,     BAD_CODE,     SSE38(0x9A),                             VexDstDstSrc)
INST3(vfmsub213ps,      "vfmsub213ps",      IUM_WR, BAD_CODE,     BAD_CODE,     SSE38(0xAA),                             VexDstDstSrc)
INST3(vfmsub231ps,      "vfmsub231ps",      IUM_WR, BAD_CODE,     BAD_CODE,     SSE38(0xBA),                             VexDstDstSrc)
INST3(vfmsub132sd,      "vfmsub132sd",      IUM_WR, BAD_CODE,     BAD_CODE,     SSE38(0x9B),                             VexDstDstSrc)
INST3(vfmsub213sd,      "vfmsub213sd",      IUM_WR, BAD_CODE,     BAD_CODE,     SSE38(0xAB),                             VexDstDstSrc)
INST3(vfmsub231sd,      "vfmsub231sd",      IUM_WR, BAD_CODE,     BAD_CODE,     SSE38(0xBB),                             VexDstDstSrc)
INST3(vfmsub132ss,      "vfmsub132ss",      IUM_WR, BAD_CODE,     BAD_CODE,     SSE38(0x9B),                             VexDstDstSrc)
INST3(vfmsub213ss,      "vfmsub213ss",      IUM_WR, BAD_CODE,     BAD_CODE,     SSE38(0xAB),                             VexDstDstSrc)
INST3(vfmsub231ss,      "vfmsub231ss",      IUM_WR, BAD_CODE,     BAD_CODE,     SSE38(0xBB),                             VexDstDstSrc)
INST3(vfnmadd132pd,     "vfnmadd132pd",     IUM_WR, BAD_CODE,     BAD_CODE,     SSE38(0x9C),                             VexDstDstSrc)
INST3(vfnmadd213pd,     "vfnmadd213pd",     IUM_WR, BAD_CODE,     BAD_CODE,     SSE38(0xAC),                             VexDstDstSrc)
INST3(vfnmadd231pd,     "vfnmadd231pd",     IUM_WR, BAD_CODE,     BAD_CODE,     SSE38(0xBC),                             VexDstDstSrc)
INST3(vfnmadd132ps,     "vfnmadd132ps",     IUM_WR, BAD_CODE,     BAD_CODE,     SSE38(0x9C),                             VexDstDstSrc)
INST3(vfnmadd213ps,     "vfnmadd213ps",     IUM_WR, BAD_CODE,     BAD_CODE,     SSE38(0xAC),                             VexDstDstSrc)
INST3(vfnmadd231ps,     "vfnmadd231ps",     IUM_WR, BAD_CODE,     BAD_CODE,     SSE38(0xBC),                             VexDstDstSrc)
INST3(vfnmadd132sd,     "vfnmadd132sd",     IUM_WR, BAD_CODE,     BAD_CODE,     SSE38(0x9D),                             VexDstDstSrc)
INST3(vfnmadd213sd,     "vfnmadd213sd",     IUM_WR, BAD_CODE,     BAD_CODE,     SSE38(0xAD),                             VexDstDstSrc)
INST3(vfnmadd231sd,     "vfnmadd231sd",     IUM_WR, BAD_CODE,     BAD_CODE,     SSE38(0xBD),                             VexDstDstSrc)
INST3(vfnmadd132ss,     "vfnmadd132ss",     IUM_WR, BAD_CODE,     BAD_CODE,     SSE38(0x9D),                             VexDstDstSrc)
INST3(vfnmadd213ss,     "vfnmadd213ss",     IUM_WR, BAD_CODE,     BAD_CODE,     SSE38(0xAD),                             VexDstDstSrc)
INST3(vfnmadd231ss,     "vfnmadd231ss",     IUM_WR, BAD_CODE,     BAD_CODE,     SSE38(0xBD),                             VexDstDstSrc)
INST3(vfnmsub132pd,     "vfnmsub132pd",     IUM_WR, BAD_CODE,     BAD_CODE,     SSE38(0x9E),                             VexDstDstSrc)
INST3(vfnmsub213pd,     "vfnmsub213pd",     IUM_WR, BAD_CODE,     BAD_CODE,     SSE38(0xAE),                             VexDstDstSrc)
INST3(vfnmsub231pd,     "vfnmsub231pd",     IUM_WR, BAD_CODE,     BAD_CODE,     SSE38(0xBE),                             VexDstDstSrc)
INST3(vfnmsub132ps,     "vfnmsub132ps",     IUM_WR, BAD_CODE,     BAD_CODE,     SSE38(0x9E),                             VexDstDstSrc)
INST3(vfnmsub213ps,     "vfnmsub213ps",     IUM_WR, BAD_CODE,     BAD_CODE,     SSE38(0xAE),                             VexDstDstSrc)
INST3(vfnmsub231ps,     "vfnmsub231ps",     IUM_WR, BAD_CODE,     BAD_CODE,     SSE38(0xBE),                             VexDstDstSrc)
INST3(vfnmsub132sd,     "vfnmsub132sd",     IUM_WR, BAD_CODE,     BAD_CODE,     SSE38(0x9F),                             VexDstDstSrc)
INST3(vfnmsub213sd,     "vfnmsub213sd",     IUM_WR, BAD_CODE,     BAD_CODE,     SSE38(0xAF),                             VexDstDstSrc)
INST3(vfnmsub231sd,     "vfnmsub231sd",     IUM_WR, BAD_CODE,     BAD_CODE,     SSE38(0xBF),                             VexDstDstSrc)
INST3(vfnmsub132ss,     "vfnmsub132ss",     IUM_WR, BAD_CODE,     BAD_CODE,     SSE38(0x9F),                             VexDstDstSrc)
INST3(vfnmsub213ss,     "vfnmsub213ss",     IUM_WR, BAD_CODE,     BAD_CODE,     SSE38(0xAF),                             VexDstDstSrc)
INST3(vfnmsub231ss,     "vfnmsub231ss",     IUM_WR, BAD_CODE,     BAD_CODE,     SSE38(0xBF),                             VexDstDstSrc)
INSTA(LAST_FMA_INSTRUCTION, vfnmsub231ss)

INSTA(FIRST_AVXVNNI_INSTRUCTION, vpdpbusd)
INST3(vpdpbusd,          "vpdpbusd",        IUM_WR, BAD_CODE,     BAD_CODE,     SSE38(0x50),                             VexDstDstSrc)
INST3(vpdpwssd,          "vpdpwssd",        IUM_WR, BAD_CODE,     BAD_CODE,     SSE38(0x52),                             VexDstDstSrc)
INST3(vpdpbusds,         "vpdpbusds",       IUM_WR, BAD_CODE,     BAD_CODE,     SSE38(0x51),                             VexDstDstSrc)
INST3(vpdpwssds,         "vpdpwssds",       IUM_WR, BAD_CODE,     BAD_CODE,     SSE38(0x53),                             VexDstDstSrc)
INSTA(LAST_AVXVNNI_INSTRUCTION, vpdpwssds)

INSTA(FIRST_BMI_INSTRUCTION, andn)
// BMI1
INST3(andn,             "andn",             IUM_WR, BAD_CODE,     BAD_CODE,     SSE38(0xF2),                             VexDstDstSrc)
INST3(blsi,             "blsi",             IUM_WR, BAD_CODE,     BAD_CODE,     SSE38(0xF3),                             VexDstDstSrc)
INST3(blsmsk,           "blsmsk",           IUM_WR, BAD_CODE,     BAD_CODE,     SSE38(0xF3),                             VexDstDstSrc)
INST3(blsr,             "blsr",             IUM_WR, BAD_CODE,     BAD_CODE,     SSE38(0xF3),                             VexDstDstSrc)
INST3(bextr,            "bextr",            IUM_WR, BAD_CODE,     BAD_CODE,     SSE38(0xF7),                             VexDstDstSrc)
// BMI2
INST3(rorx,             "rorx",             IUM_WR, BAD_CODE,     BAD_CODE,     SSE3A(0xF0),                             None)
INST3(pdep,             "pdep",             IUM_WR, BAD_CODE,     BAD_CODE,     SSE38(0xF5),                             VexDstDstSrc)
INST3(pext,             "pext",             IUM_WR, BAD_CODE,     BAD_CODE,     SSE38(0xF5),                             VexDstDstSrc)
INST3(bzhi,             "bzhi",             IUM_WR, BAD_CODE,     BAD_CODE,     SSE38(0xF5),                             BzhiFlags | VexDstDstSrc)
INST3(mulx,             "mulx",             IUM_WR, BAD_CODE,     BAD_CODE,     SSE38(0xF6),                             VexDstDstSrc)
INSTA(LAST_BMI_INSTRUCTION, mulx)
INSTA(LAST_AVX_INSTRUCTION, mulx)

INST3(crc32,            "crc32",            IUM_WR, BAD_CODE,     BAD_CODE,     F20F38(0xF1),                            None)
INST3(tzcnt,            "tzcnt",            IUM_WR, BAD_CODE,     BAD_CODE,     SSEFLT(0xBC),                            ZCntFlags)
INST3(lzcnt,            "lzcnt",            IUM_WR, BAD_CODE,     BAD_CODE,     SSEFLT(0xBD),                            ZCntFlags)
INST3(popcnt,           "popcnt",           IUM_WR, BAD_CODE,     BAD_CODE,     SSEFLT(0xB8),                            PopCntFlags)

//    id                nm                  um      mr            mi                                                     flags
INST2(ret,              "ret",              IUM_RD, 0xC3,         0xC2,                                                  None)
INST2(call,             "call",             IUM_RD, 0x10FF,       0xE8,                                                  None)

INST2(rol,              "rol",              IUM_RW, 0x00D3,       BAD_CODE,                                              RotateNFlags)
INST2(rol_1,            "rol",              IUM_RW, 0x00D1,       0x00D1,                                                Rotate1Flags)
INST2(rol_N,            "rol",              IUM_RW, BAD_CODE,     0x00C1,                                                RotateNFlags)
INST2(ror,              "ror",              IUM_RW, 0x08D3,       BAD_CODE,                                              RotateNFlags)
INST2(ror_1,            "ror",              IUM_RW, 0x08D1,       0x08D1,                                                Rotate1Flags)
INST2(ror_N,            "ror",              IUM_RW, BAD_CODE,     0x08C1,                                                RotateNFlags)
INST2(rcl,              "rcl",              IUM_RW, 0x10D3,       BAD_CODE,                                              RotateCarryNFlags)
INST2(rcl_1,            "rcl",              IUM_RW, 0x10D1,       0x10D1,                                                RotateCarry1Flags)
INST2(rcl_N,            "rcl",              IUM_RW, BAD_CODE,     0x10C1,                                                RotateCarryNFlags) 
INST2(rcr,              "rcr",              IUM_RW, 0x18D3,       BAD_CODE,                                              RotateCarryNFlags)
INST2(rcr_1,            "rcr",              IUM_RW, 0x18D1,       0x18D1,                                                RotateCarry1Flags)   
INST2(rcr_N,            "rcr",              IUM_RW, BAD_CODE,     0x18C1,                                                RotateCarryNFlags)

INST2(shl,              "shl",              IUM_RW, 0x20D3,       BAD_CODE,                                              ShiftNFlags)
INST2(shl_1,            "shl",              IUM_RW, 0x20D1,       0x20D1,                                                Shift1Flags)
INST2(shl_N,            "shl",              IUM_RW, BAD_CODE,     0x20C1,                                                ShiftNFlags)
INST2(shr,              "shr",              IUM_RW, 0x28D3,       BAD_CODE,                                              ShiftNFlags)
INST2(shr_1,            "shr",              IUM_RW, 0x28D1,       0x28D1,                                                Shift1Flags)
INST2(shr_N,            "shr",              IUM_RW, BAD_CODE,     0x28C1,                                                ShiftNFlags)
INST2(sar,              "sar",              IUM_RW, 0x38D3,       BAD_CODE,                                              ShiftNFlags)
INST2(sar_1,            "sar",              IUM_RW, 0x38D1,       0x38D1,                                                Shift1Flags)
INST2(sar_N,            "sar",              IUM_RW, BAD_CODE,     0x38C1,                                                ShiftNFlags)

//    id                nm                  um      mr                                                                   flags
INST1(inc,              "inc",              IUM_RW, 0x00FF,                                                              IncDecFlags)
INST1(dec,              "dec",              IUM_RW, 0x08FF,                                                              IncDecFlags)

INST1(neg,              "neg",              IUM_RW, 0x18F7,                                                              AddSubFlags)
INST1(not,              "not",              IUM_RW, 0x10F7,                                                              None)

INST1(idiv,             "idiv",             IUM_RD, 0x38F7,                                                              DivFlags)
INST1(div,              "div",              IUM_RD, 0x30F7,                                                              DivFlags)
INST1(mulEAX,           "mul",              IUM_RD, 0x20F7,                                                              ImulFlags)
INST1(imulEAX,          "imul",             IUM_RD, 0x28F7,                                                              ImulFlags)

INST1(xadd,             "xadd",             IUM_RW, PCKFLT(0xC1),                                                        AddSubFlags)
INST1(cmpxchg,          "cmpxchg",          IUM_RW, PCKFLT(0xB1),                                                        AddSubFlags)

INST1(rep_movs,         "rep movs",         IUM_RD, 0xA5F3,                                                              DirFlags)
INST1(movs,             "movs",             IUM_RD, 0xA5,                                                                DirFlags)
INST1(rep_stos,         "rep stos",         IUM_RD, 0xABF3,                                                              DirFlags)
INST1(stos,             "stos",             IUM_RD, 0xAB,                                                                DirFlags)

INST1(int3,             "int3",             IUM_RD, 0xCC,                                                                None)
INST1(nop,              "nop",              IUM_RD, 0x90,                                                                None)
INST1(lock,             "lock",             IUM_RD, 0xF0,                                                                None)
INST1(leave,            "leave",            IUM_RD, 0xC9,                                                                None)

INST1(cdq,              "cdq",              IUM_RD, 0x99,                                                                None)

INST1(shld,             "shld",             IUM_RW, PCKFLT(0xA4),                                                        ShiftNFlags)
INST1(shrd,             "shrd",             IUM_RW, PCKFLT(0xAC),                                                        ShiftNFlags)

INST1(vzeroupper,       "vzeroupper",       IUM_WR, 0xC577F8,                                                            None)

// For RyuJIT/x86, we follow the x86 calling convention that requires
// us to return floating point value on the x87 FP stack, so we need
// these instructions regardless of whether we're using full stack fp.
#ifdef TARGET_X86
INST1(fld,              "fld",              IUM_WR, 0x00D9,                                                              None)
INST1(fstp,             "fstp",             IUM_WR, 0x18D9,                                                              None)
#endif

INST1(seto,             "seto",             IUM_WR, PCKFLT(0x90),                                                        CcFlags_o)
INST1(setno,            "setno",            IUM_WR, PCKFLT(0x91),                                                        CcFlags_no)
INST1(setb,             "setb",             IUM_WR, PCKFLT(0x92),                                                        CcFlags_b)
INST1(setae,            "setae",            IUM_WR, PCKFLT(0x93),                                                        CcFlags_ae)
INST1(sete,             "sete",             IUM_WR, PCKFLT(0x94),                                                        CcFlags_e)
INST1(setne,            "setne",            IUM_WR, PCKFLT(0x95),                                                        CcFlags_ne)
INST1(setbe,            "setbe",            IUM_WR, PCKFLT(0x96),                                                        CcFlags_be)
INST1(seta,             "seta",             IUM_WR, PCKFLT(0x97),                                                        CcFlags_a)
INST1(sets,             "sets",             IUM_WR, PCKFLT(0x98),                                                        CcFlags_s)
INST1(setns,            "setns",            IUM_WR, PCKFLT(0x99),                                                        CcFlags_ns)
INST1(setp,             "setp",             IUM_WR, PCKFLT(0x9A),                                                        CcFlags_p)
INST1(setnp,            "setnp",            IUM_WR, PCKFLT(0x9B),                                                        CcFlags_np)
INST1(setl,             "setl",             IUM_WR, PCKFLT(0x9C),                                                        CcFlags_l)
INST1(setge,            "setge",            IUM_WR, PCKFLT(0x9D),                                                        CcFlags_ge)
INST1(setle,            "setle",            IUM_WR, PCKFLT(0x9E),                                                        CcFlags_le)
INST1(setg,             "setg",             IUM_WR, PCKFLT(0x9F),                                                        CcFlags_g)

#ifdef TARGET_AMD64
// A jump with rex prefix. This is used for register indirect tail calls.
INST1(rex_jmp,          "rex.jmp",          IUM_RD, 0x20FF,                                                              None)
#endif

INST1(i_jmp,            "jmp",              IUM_RD, 0x20FF,                                                              None)

INST0(jmp,              "jmp",              IUM_RD, 0xEB,                                                                None)
INST0(l_jmp,            "jmp",              IUM_RD, 0xE9,                                                                None)

INST0(jo,               "jo",               IUM_RD, 0x70,                                                                CcFlags_o)
INST0(jno,              "jno",              IUM_RD, 0x71,                                                                CcFlags_no)
INST0(jb,               "jb",               IUM_RD, 0x72,                                                                CcFlags_b)
INST0(jae,              "jae",              IUM_RD, 0x73,                                                                CcFlags_ae)
INST0(je,               "je",               IUM_RD, 0x74,                                                                CcFlags_e)
INST0(jne,              "jne",              IUM_RD, 0x75,                                                                CcFlags_ne)
INST0(jbe,              "jbe",              IUM_RD, 0x76,                                                                CcFlags_be)
INST0(ja,               "ja",               IUM_RD, 0x77,                                                                CcFlags_a)
INST0(js,               "js",               IUM_RD, 0x78,                                                                CcFlags_s)
INST0(jns,              "jns",              IUM_RD, 0x79,                                                                CcFlags_ns)
INST0(jp,               "jp",               IUM_RD, 0x7A,                                                                CcFlags_p)
INST0(jnp,              "jnp",              IUM_RD, 0x7B,                                                                CcFlags_np)
INST0(jl,               "jl",               IUM_RD, 0x7C,                                                                CcFlags_l)
INST0(jge,              "jge",              IUM_RD, 0x7D,                                                                CcFlags_ge)
INST0(jle,              "jle",              IUM_RD, 0x7E,                                                                CcFlags_le)
INST0(jg,               "jg",               IUM_RD, 0x7F,                                                                CcFlags_g)

INST0(align,            "align",            IUM_RD, BAD_CODE,                                                            None)
// clang-format on

#undef INST0
#undef INST1
#undef INST2
#undef INST3
#undef INST4
#undef INST5
#undef INSTA

#endif // TARGET_XARCH
